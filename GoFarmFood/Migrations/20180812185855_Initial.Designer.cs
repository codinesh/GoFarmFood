// <auto-generated />
using System;
using GoFarmFood.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GoFarmFood.Web.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20180812185855_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.Common.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<string>("City");

                    b.Property<string>("CompleteAddress");

                    b.Property<string>("Country");

                    b.Property<string>("Landmark");

                    b.Property<Guid?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("State");

                    b.Property<int>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.ConsumerAggregate.Consumer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressId");

                    b.Property<string>("FirstName");

                    b.Property<Guid?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<string>("LastName");

                    b.Property<int>("Proximity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Consumers");
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.ConsumerAggregate.PreferredFarmer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ConsumerId");

                    b.Property<Guid>("FarmerId");

                    b.Property<int>("ItemType");

                    b.Property<Guid?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<Guid?>("RiderId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("RiderId");

                    b.ToTable("PreferredFarmer");
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.ConsumerAggregate.Rider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressId");

                    b.Property<string>("FirstName");

                    b.Property<Guid?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<string>("LastName");

                    b.Property<int>("Proximity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Riders");
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.FarmerAggregate.AvailableItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CapacityPerDay");

                    b.Property<Guid>("FarmerId");

                    b.Property<Guid?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<Guid>("ProductItemId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("FarmerId");

                    b.HasIndex("ProductItemId");

                    b.ToTable("AvailableItems");
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.FarmerAggregate.Farmer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressId");

                    b.Property<string>("FirstName");

                    b.Property<Guid?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<string>("LastName");

                    b.Property<int>("Proximity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Farmers");
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.OrderAggregate.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ConsumerId");

                    b.Property<DateTime>("EndDate");

                    b.Property<Guid>("FarmerId");

                    b.Property<Guid?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<Guid?>("PaymentInformationId");

                    b.Property<Guid>("ProductItemId");

                    b.Property<double>("Quantity");

                    b.Property<Guid?>("RiderId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("StartDate");

                    b.Property<double>("TotalAmount");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("FarmerId")
                        .IsUnique();

                    b.HasIndex("PaymentInformationId");

                    b.HasIndex("RiderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.OrderAggregate.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<Guid?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<DateTime>("OrderDate");

                    b.Property<Guid>("OrderId");

                    b.Property<double>("Quantity");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.OrderAggregate.PaymentInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardDetails");

                    b.Property<Guid>("CardId");

                    b.Property<Guid>("CustomerId");

                    b.Property<Guid?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("PaymentInformation");
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.ProductAggregate.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.Property<Guid?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.ProductAggregate.ProductItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<string>("Name");

                    b.Property<Guid>("ProductId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductItems");
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.ProductAggregate.ProductPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AddressId");

                    b.Property<Guid?>("LastModifiedBy");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<double>("PricePerUnit");

                    b.Property<Guid>("ProductItemId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ProductItemId");

                    b.ToTable("ProductPrice");
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.ConsumerAggregate.Consumer", b =>
                {
                    b.HasOne("GoFarmFood.Web.DataAccess.Entities.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.ConsumerAggregate.PreferredFarmer", b =>
                {
                    b.HasOne("GoFarmFood.Web.DataAccess.Entities.ConsumerAggregate.Consumer")
                        .WithMany("PreferredFarmers")
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoFarmFood.Web.DataAccess.Entities.ConsumerAggregate.Rider", "Rider")
                        .WithMany()
                        .HasForeignKey("RiderId");
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.ConsumerAggregate.Rider", b =>
                {
                    b.HasOne("GoFarmFood.Web.DataAccess.Entities.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.FarmerAggregate.AvailableItem", b =>
                {
                    b.HasOne("GoFarmFood.Web.DataAccess.Entities.FarmerAggregate.Farmer", "Farmer")
                        .WithMany()
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoFarmFood.Web.DataAccess.Entities.ProductAggregate.ProductItem", "ProductItem")
                        .WithMany()
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.FarmerAggregate.Farmer", b =>
                {
                    b.HasOne("GoFarmFood.Web.DataAccess.Entities.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.OrderAggregate.Order", b =>
                {
                    b.HasOne("GoFarmFood.Web.DataAccess.Entities.ConsumerAggregate.Consumer")
                        .WithMany("Orders")
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GoFarmFood.Web.DataAccess.Entities.FarmerAggregate.Farmer")
                        .WithOne("OrderAggregate")
                        .HasForeignKey("GoFarmFood.Web.DataAccess.Entities.OrderAggregate.Order", "FarmerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GoFarmFood.Web.DataAccess.Entities.OrderAggregate.PaymentInformation", "PaymentInformation")
                        .WithMany()
                        .HasForeignKey("PaymentInformationId");

                    b.HasOne("GoFarmFood.Web.DataAccess.Entities.ConsumerAggregate.Rider")
                        .WithMany("Orders")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.OrderAggregate.OrderDetail", b =>
                {
                    b.HasOne("GoFarmFood.Web.DataAccess.Entities.OrderAggregate.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.ProductAggregate.ProductItem", b =>
                {
                    b.HasOne("GoFarmFood.Web.DataAccess.Entities.ProductAggregate.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GoFarmFood.Web.DataAccess.Entities.ProductAggregate.ProductPrice", b =>
                {
                    b.HasOne("GoFarmFood.Web.DataAccess.Entities.ProductAggregate.ProductItem", "ProductItem")
                        .WithMany()
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
